#!/usr/bin/env node

'use strict';

Error.stackTraceLimit = Infinity;

// Prevent EMFILE errors
require('fs2/lib/descriptors-handler')();

var noop      = require('es5-ext/lib/Function/noop')
  , some      = require('es5-ext/lib/Object/some')
  , clc       = require('cli-color')
  , resolve   = require('path').resolve
  , lintPaths = require('../lib/lint-paths')
  , getLinter = require('../lib/_get-linter')

  , optimist = require('optimist')
	.usage("usage: $0 [options] [<paths>]", {
		cache: {
			boolean: true,
			default: true,
			description: "Cache generated reports (for faster retrieval later)"
		},
		color: {
			boolean: true,
			default: true,
			description: "Colorize output"
		},
		depth: {
			default: Infinity,
			description: "How deeply to recurse into directories (default: Infinity)"
		},
		linter: {
			description: "[Mandatory] Linter path"
		},
		realFilename: {
			description: "Real filename of resource"
		},
		help: {
			boolean: true,
			desription: "Show this help"
		},
		ignoreRules: {
			default: 'git',
			description: "Obey ignore rules up to given mode " +
				"(Currently just 'git' is supported)"
		},
		stream: {
			boolean: true,
			default: true,
			description: "Whether to generate reports on the go " +
				"(while file system is scanned)"
		},
		terse: {
			boolean: true,
			description: "Program parsable output"
		},
		watch: {
			boolean: true,
			description: "Live console mode, updated on file and settings changes"
		}
	})
  , options = optimist.argv
  , linters, paths, reporter;

if (options.help || !options.linter) {
	console.log(optimist.help());
	process.exit(0);
}

linters = Array.isArray(options.linter) ? options.linter.map(getLinter) :
		[getLinter(options.linter)];

paths = options._;

delete options._;
delete options.$0;

if (!paths.length) paths.push('.');

if (options.terse) {
	options.stream = false;
	options.watch = false;
	options.color = false;
}
if (options.watch) {
	// Keep process persistent
	setTimeout(noop, 1e9);
}

if (options.realFilename) {
	console.log(options.realFilename = resolve(options.realFilename));
}

if (options.watch && (clc.width > 10) && (clc.height > 10)) {
	reporter = require('../lib/reporters/console-watch');
} else if (options.stream) {
	reporter = require('../lib/reporters/console-stream');
} else if (options.terse) {
	reporter = require('../lib/reporters/console-terse');
} else {
	reporter = require('../lib/reporters/console');
}

linters = linters.map(function (linter) {
	return lintPaths(linter, paths, options);
});

reporter = reporter(linters, options);
reporter.end();
process.on('exit', function () {
	reporter.end(function (data) {
		process.exit(some(data, function (report) {
			return report.length;
		}) ? 1 : 0);
	});
});
